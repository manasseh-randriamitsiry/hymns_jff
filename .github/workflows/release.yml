name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Runs on tag pushes like v1.0.0, v2.5.3

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      # ----------------------
      # Checkout code
      # ----------------------
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # ----------------------
      # Set up Java (for Android build)
      # ----------------------
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # ----------------------
      # Cache Gradle dependencies
      # ----------------------
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # ----------------------
      # Set up Flutter
      # ----------------------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # ----------------------
      # Check Flutter version
      # ----------------------
      - name: Flutter version
        run: flutter --version

      # ----------------------
      # Install dependencies
      # ----------------------
      - name: Get dependencies
        run: flutter pub get

      - name: Disable Flutter Analytics
        run: flutter config --no-analytics

      # ----------------------
      # Generate App Icons
      # ----------------------
      - name: Generate App Icons
        run: flutter pub run flutter_launcher_icons:main

      # ----------------------
      # Setup Keystore
      # ----------------------
      - name: Setup Keystore
        run: |
          echo "Setting up Keystore..."
          python -c "import base64; open('android/app/fihirana.jks','wb').write(base64.b64decode('${{ secrets.KEYSTORE_BASE64 }}'))"
          if [ ! -f "android/app/fihirana.jks" ]; then
            echo '❌ Keystore file was not created'
            exit 1
          fi
          echo "✅ Keystore created successfully"
          ls -l android/app/fihirana.jks

      # ----------------------
      # Setup Google Services JSON (Firebase)
      # ----------------------
      - name: Setup Google Services JSON
        env:
          GOOGLE_JSON_BASE64: ${{ secrets.GOOGLE_JSON_BASE64 }}
        run: |
          echo "Decoding google-services.json..."
          # Try base64 --decode, fallback to base64 -d if the first form isn't available
          if ! echo "$GOOGLE_JSON_BASE64" | base64 --decode > android/app/google-services.json 2>/dev/null; then
            echo "base64 --decode failed, trying base64 -d..."
            echo "$GOOGLE_JSON_BASE64" | base64 -d > android/app/google-services.json
          fi

          # Ensure the release dir exists and copy the file there
          mkdir -p android/app/src/release
          cp android/app/google-services.json android/app/src/release/google-services.json

          # Verify files
          echo "Created files:"
          ls -l android/app/google-services.json || true
          ls -l android/app/src/release/google-services.json || true

      # ----------------------
      # Verify google-services.json presence
      # ----------------------
      - name: Verify google-services.json
        run: |
          echo "Checking for google-services.json..."
          find android/app -name "google-services.json" -print
          ls -l android/app/google-services.json || echo "⚠️ Not found in android/app"
          ls -l android/app/src/release/google-services.json || echo "⚠️ Not found in release folder"

      # ----------------------
      # Generate Changelog
      # ----------------------
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD > CHANGELOG.md
          fi
          echo "CHANGELOG created:"
          cat CHANGELOG.md

      # ----------------------
      # Build Flutter APKs
      # ----------------------
      - name: Build APKs
        run: flutter build apk --release --split-per-abi

      # ----------------------
      # Create GitHub Release
      # ----------------------
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build/app/outputs/flutter-apk/*.apk
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
